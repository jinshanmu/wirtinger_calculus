import Mathlib
import WirtingerCalculus.Basic

/-!
First-order rules for scalar-valued maps over complex inner-product spaces.

What this file provides (kept lean to avoid `simp` loops / heartbeats):
* `C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ` ‚Äî real-linear complex conjugation (implemented by `star`)
* `Jc` anti-commutes with `C‚ÑÇ` on `‚ÑÇ`
* `A‚Ñí` compatibility with conjugation: `A‚Ñí (C‚ÑÇ ‚àò T) = - (C‚ÑÇ ‚àò A‚Ñí T)`
* Conjugation rules for Wirtinger derivatives:
    - `D‚Çä(star ‚àò f) u v = star (D‚Çã f u v)`
    - `D‚Çã(star ‚àò f) u v = star (D‚Çä f u v)`
  (and operator forms by `ext`).
* Product rules (directional):
    - `D‚Çä(f*g) u v = f u * D‚Çä g u v + g u * D‚Çä f u v`
    - `D‚Çã(f*g) u v = f u * D‚Çã g u v + g u * D‚Çã f u v`
* Congruence under `=·∂†[ùìù u]` for `D‚Çä` and `D‚Çã`.
* A small algebra toolkit on `‚ÑÇ` to make simp robust.
* Minimal definitions `dz`, `dzbar` on `‚ÑÇ`.
-/

noncomputable section
open Complex
open scoped ComplexInnerProductSpace Topology

namespace Wirtinger

-- Handy notations
local notation "D‚Çä" => DplusCLM
local notation "D‚Çã" => DminusCLM

/-! ## Small algebra toolkit on `‚ÑÇ` (non-recursive simp helpers) -/

@[simp] lemma star_add' (x y : ‚ÑÇ) : star (x + y) = star x + star y := by
  simp

@[simp] lemma star_sub' (x y : ‚ÑÇ) : star (x - y) = star x - star y := by
  simp [sub_eq_add_neg]

@[simp] lemma star_mul' (x y : ‚ÑÇ) : star (x * y) = star x * star y := by
  simp

@[simp] lemma ofReal_mul_I (r : ‚Ñù) : (r : ‚ÑÇ) * I = I * (r : ‚ÑÇ) := by
  simp [mul_comm]

@[simp] lemma smul_one_real (r : ‚Ñù) : r ‚Ä¢ (1 : ‚ÑÇ) = (r : ‚ÑÇ) := by
  simp

@[simp] lemma smul_I_real (r : ‚Ñù) : r ‚Ä¢ (I : ‚ÑÇ) = (r : ‚ÑÇ) * I := by
  simp

@[simp] lemma star_real_smul (r : ‚Ñù) (z : ‚ÑÇ) : star (r ‚Ä¢ z) = r ‚Ä¢ star z := by
  -- use `r ‚Ä¢ z = (r : ‚ÑÇ) * z` and multiplicativity of `star`
  simp [smul_eq_mul]

/-! ## Real-linear conjugation on `‚ÑÇ` -/

/-- Real-linear complex conjugation on `‚ÑÇ` as a continuous linear map. -/
def C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ :=
{ toLinearMap :=
  { toFun := star
  , map_add' := by intro x y; simp
  , map_smul' := by intro r z; simp },
  cont := continuous_star }

@[simp] lemma C‚ÑÇ_apply (z : ‚ÑÇ) : C‚ÑÇ z = star z := rfl

/-- `J` anti-commutes with real-linear conjugation on `‚ÑÇ`. -/
lemma Jc_comp_C‚ÑÇ_anticom :
  (Jc ‚ÑÇ).comp C‚ÑÇ = - (C‚ÑÇ.comp (Jc ‚ÑÇ)) := by
  ext z
  have hI : star (I : ‚ÑÇ) = -I := by simp
  -- LHS = I * star z; RHS = -(star (I * z)) = - (star I * star z) = I * star z.
  simp [ContinuousLinearMap.comp_apply, Jc_apply, C‚ÑÇ_apply, hI]

/-! ## Compatibility of `A‚Ñí` with conjugation -/

section A‚Ñí_conj
variable {H : Type*}
variable [NormedAddCommGroup H] [InnerProductSpace ‚ÑÇ H]

/-- Compatibility of the anti-twist with conjugation. -/
lemma A‚Ñí_comp_C‚ÑÇ (T : H ‚ÜíL[‚Ñù] ‚ÑÇ) :
  A‚Ñí (H:=H) (W:=‚ÑÇ) (C‚ÑÇ.comp T)
    = - C‚ÑÇ.comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) := by
  -- expand via the definition used in `Basic` (sandwich with `Jc`)
  ext v
  have hI : star (I : ‚ÑÇ) = -I := by simp
  simp [ContinuousLinearMap.comp_apply, C‚ÑÇ_apply, hI, sub_eq_add_neg]
end A‚Ñí_conj

/-! ## A basic congruence lemma for `fderivR` (needed later) -/

-- congruence of `fderivR` under eventual equality
lemma fderivR_congr_of_eventuallyEq
  {H : Type*} [NormedAddCommGroup H] [InnerProductSpace ‚ÑÇ H]
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  fderivR f u = fderivR g u := by
  have hf' := hf.hasFDerivAt
  have hg' := hg.hasFDerivAt
  have hfg : HasFDerivAt g (fderivR f u) u := hf'.congr_of_eventuallyEq h.symm
  have huniq : fderivR g u = fderivR f u := hg'.unique hfg
  simpa using huniq.symm

/-! ## Scalar-valued rules on a complex Hilbert space -/

section scalar_rules
variable {H : Type*} [NormedAddCommGroup H] [InnerProductSpace ‚ÑÇ H]

/-! ### Conjugation (via `star`) -/

lemma Dplus_star_dir (f : H ‚Üí ‚ÑÇ) (u v : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çä (fun x => star (f x)) u v = star (D‚Çã f u v) := by
  classical
  set T := fderivR f u
  -- `fderivR (star ‚àò f) = C‚ÑÇ ‚àò T`
  have hDf :
      fderivR (fun x => star (f x)) u = (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T :=
    ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).hasFDerivAt.comp u hf.hasFDerivAt).fderiv
  -- `A‚Ñí` compat with `C‚ÑÇ`
  have hA :
      A‚Ñí (H:=H) (W:=‚ÑÇ) ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T)
        = - (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) :=
    A‚Ñí_comp_C‚ÑÇ (H:=H) (T := T)
  -- expand `D‚Çä`
  have h1 :
      (D‚Çä (fun x => star (f x)) u) v
        = (1/2 : ‚Ñù) ‚Ä¢
          (C‚ÑÇ (T v) - C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    -- from definitions: the minus comes from `hA`
    simp [DplusCLM, hDf, hA, ContinuousLinearMap.comp_apply,
          sub_eq_add_neg, ContinuousLinearMap.add_apply,
          ContinuousLinearMap.smul_apply]
  -- rewrite RHS as `star (D‚Çã f u v)`
  have h2 :
      star ((D‚Çã f u) v)
        = (1/2 : ‚Ñù) ‚Ä¢
          (C‚ÑÇ (T v) - C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    -- expand `D‚Çã`, then push `star` in using real-smul lemma
    calc
      star ((D‚Çã f u) v)
          = star ((1/2 : ‚Ñù) ‚Ä¢
                (T v - (A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
                  simp [DminusCLM, sub_eq_add_neg]
      _ = (1/2 : ‚Ñù) ‚Ä¢
            star (T v - (A‚Ñí (H:=H) (W:=‚ÑÇ) T) v) := by
              simp [star_real_smul]
      _ = (1/2 : ‚Ñù) ‚Ä¢
            (C‚ÑÇ (T v) - C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
              simp [C‚ÑÇ_apply, sub_eq_add_neg]
  simpa [h1, h2]

lemma Dminus_star_dir (f : H ‚Üí ‚ÑÇ) (u v : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çã (fun x => star (f x)) u v = star (D‚Çä f u v) := by
  classical
  set T := fderivR f u
  have hDf :
      fderivR (fun x => star (f x)) u = (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T :=
    ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).hasFDerivAt.comp u hf.hasFDerivAt).fderiv
  have hA :
      A‚Ñí (H:=H) (W:=‚ÑÇ) ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T)
        = - (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) :=
    A‚Ñí_comp_C‚ÑÇ (H:=H) (T := T)
  have h1 :
      (D‚Çã (fun x => star (f x)) u) v
        = (1/2 : ‚Ñù) ‚Ä¢
          (C‚ÑÇ (T v) + C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    -- for `D‚Çã`, the sign flips to a `+` after using `hA`
    simp [DminusCLM, hDf, hA, ContinuousLinearMap.comp_apply,
          ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply,
          sub_eq_add_neg, add_comm, add_left_comm, add_assoc]
  have h2 :
      star ((D‚Çä f u) v)
        = (1/2 : ‚Ñù) ‚Ä¢
          (C‚ÑÇ (T v) + C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    calc
      star ((D‚Çä f u) v)
          = star ((1/2 : ‚Ñù) ‚Ä¢ (T v + (A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
              simp [DplusCLM]
      _ = (1/2 : ‚Ñù) ‚Ä¢ star (T v + (A‚Ñí (H:=H) (W:=‚ÑÇ) T) v) := by
              simp [star_real_smul]
      _ = (1/2 : ‚Ñù) ‚Ä¢
            (C‚ÑÇ (T v) + C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
              simp [C‚ÑÇ_apply]
  simpa [h1, h2]

/-- Operator forms (from the directional ones). -/
lemma Dplus_star_op (f : H ‚Üí ‚ÑÇ) (u : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çä (fun x => star (f x)) u = C‚ÑÇ.comp (D‚Çã f u) := by
  ext v; simpa using Dplus_star_dir f u v hf

lemma Dminus_star_op (f : H ‚Üí ‚ÑÇ) (u : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çã (fun x => star (f x)) u = C‚ÑÇ.comp (D‚Çä f u) := by
  ext v; simpa using Dminus_star_dir f u v hf

/-! ### Product rules (directional) -/

section product_like
variable [CompleteSpace H]

lemma Dplus_prod_dir (f g : H ‚Üí ‚ÑÇ) (u v : H)
    (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u) :
  D‚Çä (fun x => f x * g x) u v
    = f u * D‚Çä g u v + g u * D‚Çä f u v := by
  classical
  set Df := fderivR f u
  set Dg := fderivR g u
  have h_mul : fderivR (fun x => f x * g x) u = f u ‚Ä¢ Dg + g u ‚Ä¢ Df := by
    simpa [fderivR, Df, Dg] using (fderiv_mul (ùïú:=‚Ñù) hf hg)
  -- expand at direction `v`
  have :
      D‚Çä (fun x => f x * g x) u v
        = (1/2 : ‚Ñù) ‚Ä¢
          ((f u ‚Ä¢ Dg + g u ‚Ä¢ Df) v
           + (A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)) v) := by
    simp [DplusCLM, h_mul, ContinuousLinearMap.add_apply,
          ContinuousLinearMap.smul_apply]
  -- push scalars and distribute `A‚Ñí`
  have hA :
      (A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)) v
        = (f u * (A‚Ñí (H:=H) (W:=‚ÑÇ) Dg v))
          + (g u * (A‚Ñí (H:=H) (W:=‚ÑÇ) Df v)) := by
    -- definition of `A‚Ñí` is linear in `T` and commutes with scalar multiplication
    simp [ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply,
          smul_eq_mul, add_comm, add_left_comm, add_assoc, mul_add]
  -- finish by recognizing `D‚Çä g u v` and `D‚Çä f u v`
  simpa [this, hA, DplusCLM, ContinuousLinearMap.add_apply,
         ContinuousLinearMap.smul_apply, smul_eq_mul, mul_add,
         add_comm, add_left_comm, add_assoc]

lemma Dminus_prod_dir (f g : H ‚Üí ‚ÑÇ) (u v : H)
    (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u) :
  D‚Çã (fun x => f x * g x) u v
    = f u * D‚Çã g u v + g u * D‚Çã f u v := by
  classical
  set Df := fderivR f u
  set Dg := fderivR g u
  have h_mul : fderivR (fun x => f x * g x) u = f u ‚Ä¢ Dg + g u ‚Ä¢ Df := by
    simpa [fderivR, Df, Dg] using (fderiv_mul (ùïú:=‚Ñù) hf hg)
  have :
      D‚Çã (fun x => f x * g x) u v
        = (1/2 : ‚Ñù) ‚Ä¢
          ((f u ‚Ä¢ Dg + g u ‚Ä¢ Df) v
           - (A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)) v) := by
    simp [DminusCLM, h_mul, ContinuousLinearMap.add_apply,
          ContinuousLinearMap.smul_apply]
  have hA :
      (A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)) v
        = (f u * (A‚Ñí (H:=H) (W:=‚ÑÇ) Dg v))
          + (g u * (A‚Ñí (H:=H) (W:=‚ÑÇ) Df v)) := by
    simp [ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply,
          smul_eq_mul, add_comm, add_left_comm, add_assoc, mul_add]
  -- a couple of tiny algebraic reshuffles with `I` never appear here,
  -- because we keep `A‚Ñí` abstract and only unfold at the end
  simpa [this, hA, DminusCLM, ContinuousLinearMap.add_apply,
         ContinuousLinearMap.smul_apply, smul_eq_mul, mul_add,
         add_comm, add_left_comm, add_assoc, sub_eq_add_neg]

end product_like

/-!  Congruence under `=·∂†[ùìù u]` (operator forms). -/

lemma DplusCLM_congr_of_eventuallyEq
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  D‚Çä f u = D‚Çä g u := by
  have := fderivR_congr_of_eventuallyEq (H:=H) hf hg h
  simp [DplusCLM, this]

lemma DminusCLM_congr_of_eventuallyEq
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  D‚Çã f u = D‚Çã g u := by
  have := fderivR_congr_of_eventuallyEq (H:=H) hf hg h
  simp [DminusCLM, this]

-- NOTE: `D‚Çä f u + D‚Çã f u = fderivR f u` is already in `Basic`.

end scalar_rules

/-! ## Minimal `dz`, `dzbar` on `‚ÑÇ` (kept light here) -/

section partials_on_C
@[simp] lemma Complex.star_I : star (I : ‚ÑÇ) = -I := by simp

/-- `dz f z := D‚Çä f z 1`. -/
def dz (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) : ‚ÑÇ := D‚Çä f z (1 : ‚ÑÇ)

/-- `dzbar f z := D‚Çã f z 1`. -/
def dzbar (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) : ‚ÑÇ := D‚Çã f z (1 : ‚ÑÇ)

end partials_on_C

end Wirtinger
