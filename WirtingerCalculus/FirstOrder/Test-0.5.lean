import Mathlib
import WirtingerCalculus.Basic

/-!
First-order rules for scalar-valued maps over complex inner-product spaces.

What this file provides (kept lean to avoid `simp` loops / heartbeats):
* `C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ` ‚Äî real-linear complex conjugation (implemented by `star`)
* `Jc` anti-commutes with `C‚ÑÇ` on `‚ÑÇ`
* `A‚Ñí` compatibility with conjugation: `A‚Ñí (C‚ÑÇ ‚àò T) = - (C‚ÑÇ ‚àò A‚Ñí T)`
* Conjugation rules for Wirtinger derivatives:
    - `D‚Çä(star ‚àò f) u v = star (D‚Çã f u v)`
    - `D‚Çã(star ‚àò f) u v = star (D‚Çä f u v)`
  (and operator forms by `ext`).
* Product rules (directional):
    - `D‚Çä(f*g) u v = f u * D‚Çä g u v + g u * D‚Çä f u v`
    - `D‚Çã(f*g) u v = f u * D‚Çã g u v + g u * D‚Çã f u v`
* Congruence under `=·∂†[ùìù u]` for `D‚Çä` and `D‚Çã`.
* Minimal definitions `dz`, `dzbar` on `‚ÑÇ` (no heavy 1D identity here).

All proofs avoid recursive `simp` patterns and only use small, targeted rewrites.
-/

noncomputable section
open Complex
open scoped ComplexInnerProductSpace Topology

namespace Wirtinger

-- Handy notations
local notation "D‚Çä" => DplusCLM
local notation "D‚Çã" => DminusCLM

/-! ## Real-linear conjugation on `‚ÑÇ` -/

@[simp] lemma star_add' (x y : ‚ÑÇ) : star (x + y) = star x + star y := by simpa using Complex.conj_add _ _
@[simp] lemma star_mul' (x y : ‚ÑÇ) : star (x * y) = star y * star x := by simpa using Complex.conj_mul _ _

/-- Real-linear complex conjugation on `‚ÑÇ` as a continuous linear map. -/
def C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ :=
{ toLinearMap :=
  { toFun := star
  , map_add' := by intro x y; simpa using (star_add' x y)
  , map_smul' := by
      intro r z
      -- Over ‚Ñù, `r ‚Ä¢ z = (r : ‚ÑÇ) * z`
      -- `star (r:‚ÑÇ) = (r:‚ÑÇ)` and `star (a*b) = star b * star a`
      simpa [smul_eq_mul, star_mul', mul_comm, mul_left_comm, mul_assoc] },
  cont := continuous_star }

@[simp] lemma C‚ÑÇ_apply (z : ‚ÑÇ) : C‚ÑÇ z = star z := rfl

/-- `J` anti-commutes with real-linear conjugation on `‚ÑÇ`. -/
lemma Jc_comp_C‚ÑÇ_anticom :
  (Jc ‚ÑÇ).comp C‚ÑÇ = - (C‚ÑÇ.comp (Jc ‚ÑÇ)) := by
  ext z
  have : star (I : ‚ÑÇ) = -I := by simp
  -- LHS = I * star z; RHS = -(star (I * z)) = star z * I; equal in ‚ÑÇ
  simp [Jc_apply, C‚ÑÇ_apply, star_mul', this, mul_comm, mul_left_comm, mul_assoc]

/-! ## Compatibility of `A‚Ñí` with conjugation -/

section A‚Ñí_conj
variable {H : Type*}
variable [NormedAddCommGroup H] [InnerProductSpace ‚ÑÇ H]

/-- Compatibility of the anti-twist with conjugation. -/
lemma A‚Ñí_comp_C‚ÑÇ (T : H ‚ÜíL[‚Ñù] ‚ÑÇ) :
  A‚Ñí (H:=H) (W:=‚ÑÇ) (C‚ÑÇ.comp T) = - C‚ÑÇ.comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) := by
  -- Prove pointwise: both sides are CLMs H ‚ÜíL[‚Ñù] ‚ÑÇ
  ext v
  have : star (I : ‚ÑÇ) = -I := by simp
  -- Expand the definition of `A‚Ñí` once and use `star_mul'`
  simp [A‚Ñí_apply, C‚ÑÇ_apply, ContinuousLinearMap.comp_apply,
        star_mul', this, mul_comm, mul_left_comm, mul_assoc, sub_eq_add_neg]
end A‚Ñí_conj

/-! ## A basic congruence lemma for `fderivR` (needed later) -/

lemma fderivR_congr_of_eventuallyEq
  {H : Type*} [NormedAddCommGroup H] [NormedSpace ‚ÑÇ H]
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  fderivR f u = fderivR g u := by
  have hf' := hf.hasFDerivAt
  have hg' := hg.hasFDerivAt
  have : HasFDerivAt g (fderivR f u) u := hf'.congr_of_eventuallyEq h.symm
  exact hg'.unique this

/-! ## Scalar-valued rules on a complex Hilbert space -/

section scalar_rules
variable {H : Type*} [NormedAddCommGroup H] [InnerProductSpace ‚ÑÇ H]

/-! ### Conjugation (via `star`) -/

lemma Dplus_star_dir (f : H ‚Üí ‚ÑÇ) (u v : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çä (fun x => star (f x)) u v = star (D‚Çã f u v) := by
  classical
  set T := fderivR f u
  -- `fderivR (star ‚àò f) = C‚ÑÇ ‚àò T`
  have hDf :
      fderivR (fun x => star (f x)) u = (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T :=
    ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).hasFDerivAt.comp u hf.hasFDerivAt).fderiv
  -- `A‚Ñí` compat with `C‚ÑÇ`
  have hA : A‚Ñí (H:=H) (W:=‚ÑÇ) ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T)
            = - (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) :=
    A‚Ñí_comp_C‚ÑÇ (H:=H) (T := T)
  -- Compute directly, keeping rewrites small
  have : D‚Çä (fun x => star (f x)) u v
        = (1/2 : ‚Ñù) ‚Ä¢ ((C‚ÑÇ (T v)) + C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    simp [DplusCLM, hDf, hA, ContinuousLinearMap.comp_apply, sub_eq_add_neg]
  -- Use ‚Ñù-linearity of `C‚ÑÇ`
  have : D‚Çä (fun x => star (f x)) u v
        = C‚ÑÇ ((1/2 : ‚Ñù) ‚Ä¢ (T v + (A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    simpa [smul_add, ContinuousLinearMap.map_add, ContinuousLinearMap.map_smul] using
      this
  -- Recognize `D‚Çã f u v`
  simpa [DminusCLM, C‚ÑÇ_apply] using this

lemma Dminus_star_dir (f : H ‚Üí ‚ÑÇ) (u v : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çã (fun x => star (f x)) u v = star (D‚Çä f u v) := by
  classical
  set T := fderivR f u
  have hDf :
      fderivR (fun x => star (f x)) u = (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T :=
    ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).hasFDerivAt.comp u hf.hasFDerivAt).fderiv
  have hA : A‚Ñí (H:=H) (W:=‚ÑÇ) ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T)
            = - (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) :=
    A‚Ñí_comp_C‚ÑÇ (H:=H) (T := T)
  have : D‚Çã (fun x => star (f x)) u v
        = (1/2 : ‚Ñù) ‚Ä¢ ((C‚ÑÇ (T v)) - C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    simp [DminusCLM, hDf, hA, ContinuousLinearMap.comp_apply, add_comm, add_left_comm, add_assoc]
  have : D‚Çã (fun x => star (f x)) u v
        = C‚ÑÇ ((1/2 : ‚Ñù) ‚Ä¢ (T v - (A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    simpa [smul_sub, ContinuousLinearMap.map_add, ContinuousLinearMap.map_smul,
           sub_eq_add_neg] using this
  simpa [DplusCLM, C‚ÑÇ_apply, sub_eq_add_neg] using this

/-- Operator forms (from the directional ones) -/
lemma Dplus_star_op (f : H ‚Üí ‚ÑÇ) (u : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çä (fun x => star (f x)) u = C‚ÑÇ.comp (D‚Çã f u) := by
  ext v; simpa using Dplus_star_dir f u v hf

lemma Dminus_star_op (f : H ‚Üí ‚ÑÇ) (u : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çã (fun x => star (f x)) u = C‚ÑÇ.comp (D‚Çä f u) := by
  ext v; simpa using Dminus_star_dir f u v hf

/-! ### Product rules (directional) -/

section product_like
variable [CompleteSpace H]

lemma Dplus_prod_dir (f g : H ‚Üí ‚ÑÇ) (u v : H)
    (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u) :
  D‚Çä (fun x => f x * g x) u v
    = f u * D‚Çä g u v + g u * D‚Çä f u v := by
  classical
  set Df := fderivR f u
  set Dg := fderivR g u
  have h_mul : fderivR (fun x => f x * g x) u = f u ‚Ä¢ Dg + g u ‚Ä¢ Df :=
    fderiv_mul hf hg
  -- `A‚Ñí` distributes over `+` and `‚Ä¢` (as ‚Ñù-linear)
  have hA_add : A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)
                = f u ‚Ä¢ A‚Ñí (H:=H) (W:=‚ÑÇ) Dg + g u ‚Ä¢ A‚Ñí (H:=H) (W:=‚ÑÇ) Df := by
    ext w; simp [A‚Ñí_apply, smul_eq_mul, mul_add, add_comm, add_left_comm, add_assoc]
  -- Prove operator equality by `ext v`
  have : D‚Çä (fun x => f x * g x) u
        = f u ‚Ä¢ D‚Çä g u + g u ‚Ä¢ D‚Çä f u := by
    ext w
    -- Evaluate `D‚Çä` pointwise using the definitions
    simp [DplusCLM, h_mul, hA_add, ContinuousLinearMap.add_apply,
          ContinuousLinearMap.smul_apply, smul_eq_mul, sub_eq_add_neg,
          add_comm, add_left_comm, add_assoc,
          mul_comm, mul_left_comm, mul_assoc]
  -- Turn it into a directional identity
  simpa [ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply, smul_eq_mul] using congrArg (fun L => L v) this

lemma Dminus_prod_dir (f g : H ‚Üí ‚ÑÇ) (u v : H)
    (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u) :
  D‚Çã (fun x => f x * g x) u v
    = f u * D‚Çã g u v + g u * D‚Çã f u v := by
  classical
  set Df := fderivR f u
  set Dg := fderivR g u
  have h_mul : fderivR (fun x => f x * g x) u = f u ‚Ä¢ Dg + g u ‚Ä¢ Df :=
    fderiv_mul hf hg
  have hA_add : A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)
                = f u ‚Ä¢ A‚Ñí (H:=H) (W:=‚ÑÇ) Dg + g u ‚Ä¢ A‚Ñí (H:=H) (W:=‚ÑÇ) Df := by
    ext w; simp [A‚Ñí_apply, smul_eq_mul, mul_add, add_comm, add_left_comm, add_assoc]
  have : D‚Çã (fun x => f x * g x) u
        = f u ‚Ä¢ D‚Çã g u + g u ‚Ä¢ D‚Çã f u := by
    ext w
    simp [DminusCLM, h_mul, hA_add, ContinuousLinearMap.add_apply,
          ContinuousLinearMap.smul_apply, smul_eq_mul,
          add_comm, add_left_comm, add_assoc,
          mul_comm, mul_left_comm, mul_assoc]
  simpa [ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply, smul_eq_mul] using congrArg (fun L => L v) this

end product_like

/-!  Congruence under `=·∂†[ùìù u]` (operator forms). -/

lemma DplusCLM_congr_of_eventuallyEq
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  D‚Çä f u = D‚Çä g u := by
  have := fderivR_congr_of_eventuallyEq (H:=H) hf hg h
  simp [DplusCLM, this]

lemma DminusCLM_congr_of_eventuallyEq
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  D‚Çã f u = D‚Çã g u := by
  have := fderivR_congr_of_eventuallyEq (H:=H) hf hg h
  simp [DminusCLM, this]

end scalar_rules

/-! ## Minimal `dz`, `dzbar` on `‚ÑÇ` (kept light here) -/

section partials_on_C
@[simp] lemma Complex.star_I : star (I : ‚ÑÇ) = -I := by simpa

/-- `dz f z := D‚Çä f z 1`. -/
def dz (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) : ‚ÑÇ := D‚Çä f z (1 : ‚ÑÇ)

/-- `dzbar f z := D‚Çã f z 1`. -/
def dzbar (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) : ‚ÑÇ := D‚Çã f z (1 : ‚ÑÇ)

end partials_on_C

end Wirtinger
