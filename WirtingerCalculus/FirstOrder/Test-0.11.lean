import Mathlib
import WirtingerCalculus.Basic

/-!
First-order rules for scalar-valued maps over complex inner-product spaces.

What this file provides (kept lean to avoid `simp` loops / heartbeats):
* `C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ` ‚Äî real-linear complex conjugation (implemented by `star`)
* `Jc` anti-commutes with `C‚ÑÇ` on `‚ÑÇ`
* `A‚Ñí` compatibility with conjugation: `A‚Ñí (C‚ÑÇ ‚àò T) = - (C‚ÑÇ ‚àò A‚Ñí T)`
* Conjugation rules for Wirtinger derivatives:
    - `D‚Çä(star ‚àò f) u v = star (D‚Çã f u v)`
    - `D‚Çã(star ‚àò f) u v = star (D‚Çä f u v)`
  (and operator forms by `ext`).
* Product rules (directional):
    - `D‚Çä(f*g) u v = f u * D‚Çä g u v + g u * D‚Çä f u v`
    - `D‚Çã(f*g) u v = f u * D‚Çã g u v + g u * D‚Çã f u v`
* Congruence under `=·∂†[ùìù u]` for `D‚Çä` and `D‚Çã`.
* A small algebra toolkit on `‚ÑÇ` to make simp robust.
* Minimal definitions `dz`, `dzbar` on `‚ÑÇ`.
-/

noncomputable section
open Complex
open scoped ComplexInnerProductSpace Topology

namespace Wirtinger

-- Handy notations
local notation "D‚Çä" => DplusCLM
local notation "D‚Çã" => DminusCLM

/-! ## Small algebra toolkit on `‚ÑÇ` (non-recursive simp helpers) -/

@[simp] lemma star_add' (x y : ‚ÑÇ) : star (x + y) = star x + star y := by
  simp

@[simp] lemma star_mul' (x y : ‚ÑÇ) : star (x * y) = star x * star y := by
  simp

@[simp] lemma ofReal_mul_I (r : ‚Ñù) : (r : ‚ÑÇ) * I = I * (r : ‚ÑÇ) := by
  simp [mul_comm]

@[simp] lemma smul_one_real (r : ‚Ñù) : r ‚Ä¢ (1 : ‚ÑÇ) = (r : ‚ÑÇ) := by
  simp

@[simp] lemma smul_I_real (r : ‚Ñù) : r ‚Ä¢ (I : ‚ÑÇ) = (r : ‚ÑÇ) * I := by
  simp

/-! ## Real-linear conjugation on `‚ÑÇ` -/

/-- Real-linear complex conjugation on `‚ÑÇ` as a continuous linear map. -/
def C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ :=
{ toLinearMap :=
  { toFun := star
  , map_add' := by
      intro x y; simp
  , map_smul' := by
      intro r z
      -- Over ‚Ñù, `r ‚Ä¢ z = (r : ‚ÑÇ) * z` and `star` preserves real scalars and is multiplicative.
      simp },
  cont := continuous_star }

@[simp] lemma C‚ÑÇ_apply (z : ‚ÑÇ) : C‚ÑÇ z = star z := rfl

/-- `J` anti-commutes with real-linear conjugation on `‚ÑÇ`. -/
lemma Jc_comp_C‚ÑÇ_anticom :
  (Jc ‚ÑÇ).comp C‚ÑÇ = - (C‚ÑÇ.comp (Jc ‚ÑÇ)) := by
  ext z
  have hI : star (I : ‚ÑÇ) = -I := by simp
  -- LHS = I * star z; RHS = -(star (I * z)) = - (star I * star z) = I * star z.
  simp [ContinuousLinearMap.comp_apply, Jc_apply, C‚ÑÇ_apply, hI, mul_comm, mul_left_comm, mul_assoc]

/-! ## Compatibility of `A‚Ñí` with conjugation -/

section A‚Ñí_conj
variable {H : Type*}
variable [NormedAddCommGroup H] [InnerProductSpace ‚ÑÇ H]

/-- Compatibility of the anti-twist with conjugation. -/
lemma A‚Ñí_comp_C‚ÑÇ (T : H ‚ÜíL[‚Ñù] ‚ÑÇ) :
  A‚Ñí (H:=H) (W:=‚ÑÇ) (C‚ÑÇ.comp T) = - C‚ÑÇ.comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) := by
  -- Expand the (sandwich) definition of `A‚Ñí` and use anticommutation above.
  ext v
  have hI : star (I : ‚ÑÇ) = -I := by simp
  simp [ContinuousLinearMap.comp_apply, C‚ÑÇ_apply, hI, sub_eq_add_neg, mul_comm, mul_left_comm, mul_assoc]
end A‚Ñí_conj

/-! ## A basic congruence lemma for `fderivR` (needed later) -/

-- congruence of `fderivR` under eventual equality
lemma fderivR_congr_of_eventuallyEq
  {H : Type*} [NormedAddCommGroup H] [InnerProductSpace ‚ÑÇ H]
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  fderivR f u = fderivR g u := by
  have hf' := hf.hasFDerivAt
  have hg' := hg.hasFDerivAt
  have : HasFDerivAt g (fderivR f u) u := hf'.congr_of_eventuallyEq h.symm
  exact hg'.unique this

/-! ## Scalar-valued rules on a complex Hilbert space -/

section scalar_rules
variable {H : Type*} [NormedAddCommGroup H] [InnerProductSpace ‚ÑÇ H]

/-! ### Conjugation (via `star`) -/

lemma Dplus_star_dir (f : H ‚Üí ‚ÑÇ) (u v : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çä (fun x => star (f x)) u v = star (D‚Çã f u v) := by
  classical
  set T := fderivR f u
  -- `fderivR (star ‚àò f) = C‚ÑÇ ‚àò T`
  have hDf :
      fderivR (fun x => star (f x)) u = (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T :=
    ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).hasFDerivAt.comp u hf.hasFDerivAt).fderiv
  -- `A‚Ñí` compat with `C‚ÑÇ`
  have hA : A‚Ñí (H:=H) (W:=‚ÑÇ) ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T)
            = - (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) :=
    A‚Ñí_comp_C‚ÑÇ (H:=H) (T := T)
  -- Expand definitions with light `simp`.
  have : D‚Çä (fun x => star (f x)) u v
        = (1/2 : ‚Ñù) ‚Ä¢ ((C‚ÑÇ (T v)) + C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    simp (only) [DplusCLM, hDf, hA, ContinuousLinearMap.comp_apply, sub_eq_add_neg,
      ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply, smul_add]
  -- Use ‚Ñù-linearity of `C‚ÑÇ`.
  have : D‚Çä (fun x => star (f x)) u v
        = C‚ÑÇ ((1/2 : ‚Ñù) ‚Ä¢ (T v + (A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    simpa [map_add, map_smul] using this
  -- Recognize `D‚Çã f u v`.
  simpa [DminusCLM, C‚ÑÇ_apply, sub_eq_add_neg, ContinuousLinearMap.add_apply,
         ContinuousLinearMap.smul_apply, smul_add] using this

lemma Dminus_star_dir (f : H ‚Üí ‚ÑÇ) (u v : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çã (fun x => star (f x)) u v = star (D‚Çä f u v) := by
  classical
  set T := fderivR f u
  have hDf :
      fderivR (fun x => star (f x)) u = (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T :=
    ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).hasFDerivAt.comp u hf.hasFDerivAt).fderiv
  have hA : A‚Ñí (H:=H) (W:=‚ÑÇ) ((C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp T)
            = - (C‚ÑÇ : ‚ÑÇ ‚ÜíL[‚Ñù] ‚ÑÇ).comp (A‚Ñí (H:=H) (W:=‚ÑÇ) T) :=
    A‚Ñí_comp_C‚ÑÇ (H:=H) (T := T)
  have : D‚Çã (fun x => star (f x)) u v
        = (1/2 : ‚Ñù) ‚Ä¢ ((C‚ÑÇ (T v)) - C‚ÑÇ ((A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    simp (only) [DminusCLM, hDf, hA, ContinuousLinearMap.comp_apply,
      ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply, add_comm,
      add_left_comm, add_assoc, smul_sub, sub_eq_add_neg]
  have : D‚Çã (fun x => star (f x)) u v
        = C‚ÑÇ ((1/2 : ‚Ñù) ‚Ä¢ (T v - (A‚Ñí (H:=H) (W:=‚ÑÇ) T) v)) := by
    simpa [map_add, map_smul, sub_eq_add_neg] using this
  simpa [DplusCLM, C‚ÑÇ_apply, sub_eq_add_neg, ContinuousLinearMap.add_apply,
         ContinuousLinearMap.smul_apply, smul_add] using this

/-- Operator forms (from the directional ones). -/
lemma Dplus_star_op (f : H ‚Üí ‚ÑÇ) (u : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çä (fun x => star (f x)) u = C‚ÑÇ.comp (D‚Çã f u) := by
  ext v; simpa using Dplus_star_dir f u v hf

lemma Dminus_star_op (f : H ‚Üí ‚ÑÇ) (u : H) (hf : DifferentiableAt ‚Ñù f u) :
  D‚Çã (fun x => star (f x)) u = C‚ÑÇ.comp (D‚Çä f u) := by
  ext v; simpa using Dminus_star_dir f u v hf

/-! ### Product rules (directional) -/

section product_like
variable [CompleteSpace H]

lemma Dplus_prod_dir (f g : H ‚Üí ‚ÑÇ) (u v : H)
    (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u) :
  D‚Çä (fun x => f x * g x) u v
    = f u * D‚Çä g u v + g u * D‚Çä f u v := by
  classical
  set Df := fderivR f u
  set Dg := fderivR g u
  have h_mul : fderivR (fun x => f x * g x) u = f u ‚Ä¢ Dg + g u ‚Ä¢ Df := by
    simpa [fderivR, Df, Dg] using (fderiv_mul (ùïú:=‚Ñù) hf hg)
  -- Work directly at direction `v` to avoid CLM ext.
  -- `A‚Ñí` distributes over `+` and `‚Ä¢` (over ‚Ñù), use light `simp`.
  have hA_add :
      (A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)) v
    = (f u ‚Ä¢ (A‚Ñí (H:=H) (W:=‚ÑÇ) Dg)) v
    + (g u ‚Ä¢ (A‚Ñí (H:=H) (W:=‚ÑÇ) Df)) v := by
    simp [ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply, smul_eq_mul,
          mul_add, add_comm, add_left_comm, add_assoc]
  -- Expand D‚Çä: (1/2)‚Ä¢(T v + A‚Ñí T v)
  have : D‚Çä (fun x => f x * g x) u v
      = (1/2 : ‚Ñù) ‚Ä¢ ((f u ‚Ä¢ Dg + g u ‚Ä¢ Df) v
                     + (A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)) v) := by
    simp (only) [DplusCLM, h_mul, ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply]
  -- Push scalars and use `hA_add`.
  have : D‚Çä (fun x => f x * g x) u v
      = (1/2 : ‚Ñù) ‚Ä¢ ( (f u * Dg v + g u * Df v)
                      + (f u * (A‚Ñí (H:=H) (W:=‚ÑÇ) Dg v)
                         + g u * (A‚Ñí (H:=H) (W:=‚ÑÇ) Df v)) ) := by
    simpa [hA_add, smul_eq_mul, ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply,
           mul_add, add_comm, add_left_comm, add_assoc]
  -- Recognize D‚Çä g and D‚Çä f at direction `v`.
  simpa [DplusCLM, ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply,
         smul_eq_mul, mul_add, add_comm, add_left_comm, add_assoc,
         sub_eq_add_neg] using this

lemma Dminus_prod_dir (f g : H ‚Üí ‚ÑÇ) (u v : H)
    (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u) :
  D‚Çã (fun x => f x * g x) u v
    = f u * D‚Çã g u v + g u * D‚Çã f u v := by
  classical
  set Df := fderivR f u
  set Dg := fderivR g u
  have h_mul : fderivR (fun x => f x * g x) u = f u ‚Ä¢ Dg + g u ‚Ä¢ Df := by
    simpa [fderivR, Df, Dg] using (fderiv_mul (ùïú:=‚Ñù) hf hg)
  -- As before, but with the minus combination
  have hA_add :
      (A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)) v
    = (f u ‚Ä¢ (A‚Ñí (H:=H) (W:=‚ÑÇ) Dg)) v
    + (g u ‚Ä¢ (A‚Ñí (H:=H) (W:=‚ÑÇ) Df)) v := by
    simp [ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply, smul_eq_mul,
          mul_add, add_comm, add_left_comm, add_assoc]
  have hI‚ÇÅ :
      I * (f u * Dg (I ‚Ä¢ v)) = f u * (I * Dg (I ‚Ä¢ v)) := by
    calc
      I * (f u * Dg (I ‚Ä¢ v))
          = (I * f u) * Dg (I ‚Ä¢ v) := by simp [mul_assoc]
      _   = (f u * I) * Dg (I ‚Ä¢ v) := by simp [mul_comm]
      _   = f u * (I * Dg (I ‚Ä¢ v)) := by simp [mul_assoc]
  have hI‚ÇÇ :
      I * (g u * Df (I ‚Ä¢ v)) = g u * (I * Df (I ‚Ä¢ v)) := by
    calc
      I * (g u * Df (I ‚Ä¢ v))
          = (I * g u) * Df (I ‚Ä¢ v) := by simp [mul_assoc]
      _   = (g u * I) * Df (I ‚Ä¢ v) := by simp [mul_comm]
      _   = g u * (I * Df (I ‚Ä¢ v)) := by simp [mul_assoc]
  have : D‚Çã (fun x => f x * g x) u v
      = (1/2 : ‚Ñù) ‚Ä¢ ((f u ‚Ä¢ Dg + g u ‚Ä¢ Df) v
                     - (A‚Ñí (H:=H) (W:=‚ÑÇ) (f u ‚Ä¢ Dg + g u ‚Ä¢ Df)) v) := by
    simp (only) [DminusCLM, h_mul, ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply]
  -- push scalars and reorganize
  have : D‚Çã (fun x => f x * g x) u v
      = (1/2 : ‚Ñù) ‚Ä¢ ( (f u * Dg v + g u * Df v)
                      - (f u * (A‚Ñí (H:=H) (W:=‚ÑÇ) Dg v)
                         + g u * (A‚Ñí (H:=H) (W:=‚ÑÇ) Df v)) ) := by
    simpa [hA_add, smul_eq_mul, ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply,
           mul_add, add_comm, add_left_comm, add_assoc, sub_eq_add_neg]
  -- Recognize the D‚Çã definitions (the `I`-twist is inside `A‚Ñí`).
  -- The hI‚ÇÅ/hI‚ÇÇ are only used by the simp-set inside `DminusCLM` reductions,
  -- but at this stage they are already implicit in the recognized pattern.
  simpa [DminusCLM, ContinuousLinearMap.add_apply, ContinuousLinearMap.smul_apply,
         smul_eq_mul, mul_add, add_comm, add_left_comm, add_assoc,
         sub_eq_add_neg] using this

end product_like

/-!  Congruence under `=·∂†[ùìù u]` (operator forms). -/

lemma DplusCLM_congr_of_eventuallyEq
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  D‚Çä f u = D‚Çä g u := by
  have := fderivR_congr_of_eventuallyEq (H:=H) hf hg h
  simp [DplusCLM, this]

lemma DminusCLM_congr_of_eventuallyEq
  {f g : H ‚Üí ‚ÑÇ} {u : H}
  (hf : DifferentiableAt ‚Ñù f u) (hg : DifferentiableAt ‚Ñù g u)
  (h : f =·∂†[ùìù u] g) :
  D‚Çã f u = D‚Çã g u := by
  have := fderivR_congr_of_eventuallyEq (H:=H) hf hg h
  simp [DminusCLM, this]

-- NOTE: `D‚Çä f u + D‚Çã f u = fderivR f u` is already in `Basic`, so we do NOT redeclare it here.

end scalar_rules

/-! ## Minimal `dz`, `dzbar` on `‚ÑÇ` (kept light here) -/

section partials_on_C
@[simp] lemma Complex.star_I : star (I : ‚ÑÇ) = -I := by simp

/-- `dz f z := D‚Çä f z 1`. -/
def dz (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) : ‚ÑÇ := D‚Çä f z (1 : ‚ÑÇ)

/-- `dzbar f z := D‚Çã f z 1`. -/
def dzbar (f : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) : ‚ÑÇ := D‚Çã f z (1 : ‚ÑÇ)

end partials_on_C

end Wirtinger
